<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>RDF Model and Syntax</TITLE>
   <META NAME="Author" CONTENT="Ora Lassila, Ralph Swick">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.0Gold (WinNT; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF" LINK="#0000EE" VLINK="#551A8B" ALINK="#FF0000">

<P><A HREF="/"><IMG SRC="/Icons/w3c_home" ALT="W3C" BORDER=0  ALIGN=LEFT></A>
</P>

<H3 ALIGN=RIGHT>WD-rdf-syntax-971002</H3></DIV>

<P><BR>
<BR>
</P>

<H1>Resource Description Framework (RDF)<BR>
Model and Syntax</H1>

<P>Working Group Chairs:<BR>
<B>Eric Miller, </B>Online Computer Library Center<BR>
<B>Bob Schloss</B>, IBM</P>

<P>Editors:<BR>
<B>Ora Lassila</B>, <A HREF="mailto:lassila@w3.org">lassila@w3.org</A>,
Nokia Research Center (currently visiting W3C)<BR>
<B>Ralph R. Swick</B>, <A HREF="mailto:swick@w3.org">swick@w3.org</A>,
World Wide Web Consortium</P>

<P>Contributors:<BR>
<I>Tsuyoshi Sakata (DVL), Murray Maloney (Grif), Bob Schloss (IBM), Naohiko
URAMOTO (IBM), Bill Roberts (KnowledgeCite) Ron Daniel (LANL), Andrew Layman
(Microsoft), Chris McConnell (Microsoft), Jean Paoli (Microsoft), R.V.
Guha (Netscape), Ora Lassila (Nokia), Ralph LeVan (OCLC), Eric Miller (OCLC),
Misha Wolf (Reuters), Lauren Wood (SoftQuad), Tim Bray (Textuality), Paul
Resnick (U. Mich), Tim Berners-Lee (W3C), Dan Connolly (W3C), Jim Miller
(W3C), Ralph Swick (W3C).</I></P>

<P>Version 1, 02-Oct-1997</P>

<P>This version: <A HREF="http://www.w3.org/TR/WD-rdf-syntax-971002">http://www.w3.org/TR/WD-rdf-syntax-971002<BR>
</A>Latest version: <A HREF="http://www.w3.org/Metadata/RDF/Group/WD-rdf-syntax">http://www.w3.org/Metadata/RDF/Group/WD-rdf-syntax<BR>
</A>Previous version: <A HREF="http://www.w3.org/Member/9708/WD-rdf-syntax-970801">http://www.w3.org/Member/9708/WD-rdf-syntax-970801</A></P>

<H2>Status of this document</H2>

<P>This specification represents a work in progress. It is strongly recommended
that only experimental software be implemented to this specification. This
working group will not allow early implementation to affect their ability
to make changes to this specification in a future revision. This is a draft
document and may be updated, replaced or obsoleted by other documents at
any time. It is inappropriate to use W3C&nbsp;Working Drafts as reference
material or to cite them as other than &quot;work in progress&quot;. The
RDF&nbsp;Model and Syntax Working Group of the W3C will determine when
this document should become a public W3C&nbsp;working draft.</P>

<P><B>Note:</B> As working drafts are subject to frequent change, you are
advised to reference the above URL for &quot;Latest version&quot; rather
than the URLs for working draft versions themselves. The latest version
URL&nbsp;will always point to the most current version of this draft.</P>

<P>
<HR WIDTH="100%"></P>

<H2>Table of Contents</H2>

<OL>
<LI><A HREF="#intro">Introduction</A></LI>

<LI><A HREF="#model">RDF Data Model</A></LI>

<LI><A HREF="#grammar">RDF&nbsp;Grammar</A></LI>

<LI><A HREF="#signing">Signed RDF</A></LI>

<LI><A HREF="#examples">Examples</A></LI>

<LI><A HREF="#namespaces">Appendix A:&nbsp;Brief Explanation of XML&nbsp;Namespaces</A></LI>
</OL>

<P>
<HR WIDTH="100%"></P>

<H2><A NAME="intro"></A>1. Introduction</H2>

<P>RDF – the Resource Description Framework – is a foundation for processing
metadata; it provides interoperability between applications that exchange
machine-understandable information on the Web. RDF emphasizes facilities
to enable automated processing of Web resources. RDF metadata can be used
in a variety of application areas; for example: in <I>resource discovery</I>
to provide better search engine capabilities; in <I>cataloging</I> for
describing the content and content relationships available at a particular
Web site, page, or digital library; by <I>intelligent software agents</I>
to facilitate knowledge sharing and exchange; in <I>content rating</I>;
in describing <I>collections</I> of pages that represent a single logical
&quot;document&quot;; for describing <I>intellectual property rights</I>
of Web pages, and in many others. RDF with <I>digital signatures</I> will
be key to building the &quot;Web of Trust&quot; for electronic commerce,
collaboration, and other applications.</P>

<P>Metadata is &quot;data about data&quot; or specifically in the context
of RDF &quot;data describing web resources.&quot; The distinction between
&quot;data&quot; and &quot;metadata&quot; is not an absolute one; it is
a distinction created primarily by a particular application. Many times
the same resource will be interpreted in both ways simultaneously. RDF
encourages this view by using XML as the encoding syntax for the metadata.
The resources being described by RDF are, in general, anything that can
be named via a URI. The broad goal of RDF is to define a mechanism for
describing resources that makes no assumptions about a particular application
domain, nor defines the semantics of any application domain. The definition
of the mechanism should be domain neutral, yet the mechanism should be
suitable for describing information about any domain.</P>

<P>This document introduces a model for representing RDF&nbsp;metadata
and one syntax for expressing and transporting this metadata in a manner
that maximizes the interoperability of independently developed web servers
and clients. The syntax described in this document is best considered as
a &quot;serialization syntax&quot; for the underlying RDF&nbsp;representation
model. The serialization syntax is XML, XML being the W3C's work-in-progress
to define a richer Web syntax for a variety of applications. RDF and XML
are complementary; there will be alternate ways to represent the same RDF
data model, some more suitable for direct human authoring. Future work
may lead to including such alternatives in this document.</P>

<H2><A NAME="model"></A>2. RDF Data Model</H2>

<P>At the core of RDF is a model for representing named properties and
their values. These properties serve both to represent attributes of resources
(and in this sense correspond to usual attribute-value-pairs) and to represent
relationships between resources. The RDF&nbsp;data model is a syntax-independent
way of representing RDF statements.</P>

<P>RDF&nbsp;statements that are syntactically very different could mean
the same thing. This concept of equivalence in meaning is very important
when performing queries, aggregation and a number of other tasks at which
RDF is aimed. The equivalence is defined in a clean machine understandable
way. Two pieces of RDF are equivalent if and only if their corresponding
data model representations are the same. </P>

<H3>2.1. RDF&nbsp;Core; &quot;Layer 0&quot;</H3>

<P>The core data model is precisely defined as:</P>

<TABLE BORDER=1 >
<TR>
<TD>
<OL>
<LI>There is a set of Nodes (call it N).</LI>

<LI>There is a subset of N known as the PropertyTypes (call it P).</LI>

<LI>There is a set of 3-tuples called T, whose elements are informally
known as properties. The first item of each tuple is an element of P, the
second item is an element of N and the third item is either an element
of N or an atomic value (e.g. a Unicode string). </LI>
</OL>
</TD>
</TR>
</TABLE>

<P>In this&nbsp;data model both the resources being described and the values
describing them are <I>nodes</I> in a directed labeled graph (and values
may also be resources). The <I>arcs</I> connecting pairs of nodes correspond
to the names of the property types. This is represented pictorially as:</P>

<UL>
<PRE>[resource R] ---propertyType P---&gt; [value V]</PRE>
</UL>

<P>And is read &quot;V is the value of the property P for resource R&quot;,
or left-to-right; &quot;R has property P with value V&quot;.</P>

<P>Consider as a simple example the statement:</P>

<UL>
<P><I>&quot;Ora Lassila&quot; is the &quot;author&quot; of the web page
&quot;http://www.w3.org/People/Lassila&quot;</I></P>
</UL>

<P>This statement can be represented as follows</P>

<UL>
<PRE>[http://www.w3.org/People/Lassila] ---author---&gt; &quot;Ora Lassila&quot;</PRE>
</UL>

<P>where the notation [URI] denotes the instance of the resource identified
by URI and &quot;...&quot; denotes a simple Unicode string.</P>

<P>According to the formal definition, the property &quot;author&quot;,
i.e. the arc labeled &quot;author&quot; plus its source and target nodes
is the triple (3-tuple):</P>

<UL>
<PRE>{author, [http://www.w3.org/People/Lassila], &quot;Ora Lassila&quot;}</PRE>
</UL>

<P>where &quot;author&quot; denotes a node used for labeling this arc.
This formulation of the data model lends itself to <I>reification,</I>
meaning that the relation expressed by the arc can be converted into a
concrete node to which we can refer, as follows:</P>

<UL>
<PRE>X ---PropName----&gt; author
X ---PropObj-----&gt; [http://www.w3.org/People/Lassila]
X ---PropValue---&gt; &quot;Ora Lassila&quot;</PRE>
</UL>

<P>which in fact means that a node X and three new triples are added:</P>

<UL>
<PRE>{PropName,  X, author}
{PropObj,   X, [http://www.w3.org/People/Lassila]}
{PropValue, X, &quot;Ora Lassila&quot;}</PRE>
</UL>

<P>It is later shown that reification allows us to express modalities (e.g.
beliefs about statements) or simply attach any properties to other properties.</P>

<P>A collection of these triples with the same second item is called an
<I>assertions</I>. Assertions are particularly useful when describing a
number of properties of the same resource. Assertions are diagrammed as
follows:</P>

<UL>
<PRE>[resource R] ----property P1----&gt; [value Vp1]
            |
             ----property P2----&gt; [value Vp2]</PRE>
</UL>

<P>An RDF&nbsp;<I>assertions</I> can be a resource itself and can therefore
be described by properties; that is, an <I>assertions</I> can itself be
used as the source node of an arc.</P>

<P>Assertions may be associated with the resource they describe in one
of four ways:</P>

<OL>
<LI>The assertions may be contained within the resource (embedded).</LI>

<LI>The assertions may be external to the resource but supplied by the
transfer mechanism in the same retrieval transaction as that which returns
the resource (along-with).</LI>

<LI>The assertions may be retrieved independently from the resource, including
from a different source (service bureau).</LI>

<LI>The assertions may contain the resource (wrapped).</LI>
</OL>

<P>All resources will not support all association methods; in particular,
many kinds of resources will not support embedding and only certain kinds
of resources may be embedded.</P>

<P>The set of properties in a given <I>assertions</I>, as well as any characteristics
or restrictions of the property values themselves, are defined by one or
more <I>schemas.</I> Schemas are identified by URI and RDF&nbsp;relies
on the XML&nbsp;namespace mechanism to associate the schema with the properties
in the <I>assertions</I>. The schema URI&nbsp;may be treated merely as
an identifier or it may refer to a machine-readable description of the
schema. By definition, an application that understands a particular schema
used by an <I>assertions</I> understands the semantics of each of the contained
properties. An application that has no knowledge of the particular schema
will minimally be able to parse the assertions into the property and property
value components and will be able to transport the assertions intact (e.g.
to a cache or to another application).</P>

<P>A human- or machine-readable description of an RDF schema may be accessed
through content negotiation by dereferencing the schema URI. If the schema
is machine-readable it may be possible for an application to learn some
of the semantics of the properties named in the schema on demand. The logic
and syntax of RDF schemas are described in a separate document; &quot;RDF
Machine Readable Schema Specification&quot; (not yet written).</P>

<H3>2.2. Utility Relations; &quot;Layer 1&quot;</H3>

<P>The triple composed of a resource, a property type, and a value is an
RDF&nbsp;statement. Such a statement can itself be the target node of an
arc (i.e. the value of some other property) or the source node of an arc
(i.e. it can have properties). In these cases, the original property (i.e.,
the statement) must be <I>reified</I>; that is, converted into nodes and
arcs. Reified properties are drawn as a single node with several arcs emanating
from it representing the resource, property name, and value:</P>

<UL>
<PRE>[property P1] ----PropName---&gt; [&quot;name&quot;]
             |
              ----PropObj----&gt; [resource R]
             |
              ----PropValue--&gt; [value Vp1]</PRE>
</UL>

<P>This allows RDF&nbsp;to be used to make statements about other statements;
for example, the statement &quot;Ralph believes that the document 'The
Origin of Species' was authored by Charles Darwin&quot; is diagrammed as:</P>

<UL>
<PRE>[Ralph] --believes--&gt; [statement1] --InstanceOf-&gt; RDF:Property
                                  |
                                   --PropName---&gt; &quot;author&quot;
                                  |
                                   --PropObj----&gt; [http://loc.gov/Books/Species]
                                  |
                                   --PropValue--&gt; &quot;Charles Darwin&quot;</PRE>
</UL>

<P>To help in reifying properties, RDF defines the <I>InstanceOf</I> relation
(property) to provide primitive typing, as shown in the previous example.</P>

<P>The formal definition of <I>InstanceOf</I> is:</P>

<TABLE BORDER=1 >
<TR>
<TD>
<OL>
<LI>There is an element of P known as RDF:InstanceOf.</LI>

<LI>Elements of T that have RDF:InstanceOf as the first value in the 3-tuple
must have elements of N as their second value and third values. </LI>
</OL>
</TD>
</TR>
</TABLE>

<P>The formal definition of reification is:</P>

<TABLE BORDER=1 >
<TR>
<TD>
<OL>
<LI>There is an element of N, not contained in P, known as RDF:Property.</LI>

<LI>There are three elements in P known as RDF:PropName, RDF:PropObj, and
RDF:PropValue.</LI>
</OL>
</TD>
</TR>
</TABLE>

<P>To reify a property, all that is done is to add to the data model an
additional node (with a generated label) and the three triples with first
items (or arcs with labels) of RDF:PropName, RDF:PropObj, and RDF:PropValue
respectively, second item the generated node label, and third item the
corresponding property type, resource node, and value node respectively.</P>

<P>Frequently it is necessary to create a collection of nodes; e.g. to
state that a property has multiple values. RDF&nbsp;defines three kinds
of collections: ordered lists of nodes, called <I>sequences</I>, unordered
lists of nodes, called <I>bags</I>, and lists that represent alternatives
for the (single) value of a property, called <I>alternatives</I>.</P>

<P>Formally, these three collection types are defined by:</P>

<TABLE BORDER=1 >
<TR>
<TD>
<OL>
<LI>There are three elements of N, not contained in P, called RDF:Seq,
RDF:Bag, and RDF:Alternatives.</LI>

<LI>There is a subset of P corresponding to the ordinals (1, 2, 3, ...)
called Ord. We may refer to elements of Ord as RDF:1, RDF:2, RDF:3, etc.
</LI>
</OL>
</TD>
</TR>
</TABLE>

<P>To create collections of nodes, create a new node that is an RDF:InstanceOf
one of the three node types RDF:Seq, RDF:Bag, or RDF:Alternatives. The
remaining arcs from that new node point to each of the members of the collection
and are uniquely labeled using the elements from Ord. For the RDF:Alternatives,
there must be at least one member whose arc label is RDF:1, and that is
the default value for the Alternatives node.</P>

<H2><A NAME="grammar"></A>3. RDF&nbsp;Grammar</H2>

<P>The RDF data model provides an abstract, conceptual framework for defining
and using metadata. A concrete syntax is also needed for the purposes of
authoring and exchanging this metadata. The syntax does not add to the
model; APIs may be provided to manipulate RDF without reference to a concrete
syntax. RDF&nbsp;uses the <A HREF="http://www.w3.org/TR/WD-xml-lang">Extensible
Markup Language</A> (XML) encoding as its syntax. However, RDF will not
require (and conforming implementations must not require) an XML Document
Type Declaration for the contents of assertions. In this respect RDF requires
at most the XML <A HREF="http://www.w3.org/TR/WD-xml-lang#sec2.2">well-formedness</A>
constraints. RDF&nbsp;schemas may – but are not required to – be XML&nbsp;DTDs.</P>

<P>The syntax descriptions below use BNF notation to describe the essential
RDF serialization syntax elements. As RDF&nbsp;is XML, all syntactic flexibilities
of XML are implicitly included; e.g. whitespace rules, quoting, case sensitivity,
etc. RDF&nbsp;requires the XML&nbsp;namespace facility, currently under
review by the XML Working Group.</P>

<P>RDF&nbsp;serialization syntax takes the form:</P>

<PRE>  [1] RDF            ::= '&lt;RDF:serialization&gt;' node* '&lt;/RDF:serialization&gt;'
  [2] node           ::= resource | assertions | aggregate
  [3] resource       ::= '&lt;RDF:resource' idAttr? '&gt;' property* '&lt;/RDF:resource&gt;'
  [4] assertions     ::= '&lt;RDF:assertions' idRefAttr* '&gt;'
                              property* '&lt;/RDF:assertions&gt;'
  [5] aggregate      ::= sequence | bag | alternatives
  [6] sequence       ::= '&lt;RDF:seq' idAttr? '&gt;' aggnode* '&lt;/RDF:seq&gt;'
  [7] bag            ::= '&lt;RDF:bag' idAttr? '&gt;' aggnode* '&lt;/RDF:bag&gt;'
  [8] alternatives   ::= '&lt;RDF:alternatives' idAttr? '&gt;'
                              aggnode* '&lt;/RDF:alternatives&gt;'
  [9] aggnode        ::= node | '&lt;RDF:li' hrefAttr '/&gt;'
 [10] idRefAttr      ::= hrefAttr |&nbsp;idAttr
 [11] hrefAttr       ::= 'href=&quot;' resourceURI '&quot;'
 [12] idAttr         ::= 'id=&quot;' IDsymbol '&quot;'
 [13] resourceURI    ::= (see RFC1738)
 [14] IDsymbol       ::= (any legal <A HREF="http://www.w3.org/TR/WD-xml-970807#NT-Nmtoken">XML name symbol</A>)</PRE>

<P>The RDF:serialization element is a simple wrapper that marks the boundaries
in an XML document.where the content is explicitly intended to be mappable
into an RDF data model instance. RDF:assertions and RDF:resource contain
the remaining elements that instatiate properties in the model instance.
Each XML element E contained by an RDF:assertions or&nbsp;an RDF:resource
results in the creation of a property (a triple that is an element of the
formal set T), where:</P>

<OL>
<LI>The PropObj is the node which represents the resource whose URI is
given by the value of</LI>

<UL>
<LI>the href attribute of the RDF:assertions or</LI>

<LI>the id attribute of the RDF:resource</LI>
</UL>

<LI>The PropName is the node which represents the resource whose URI is
the expansion of the namespace-qualified Generic Identifier (tag name)
of E</LI>

<LI>If E is an empty element (no content), the PropValue is the node that
represents the resource whose URI is given by the href attribute of E.
If the content of E contains no XML markup, the PropValue is content of
E (a Unicode string). Otherwise, the PropValue is the node obtained by
mapping the content of E using these mapping rules.</LI>
</OL>

<P>The RDF:resource element creates an in-line resource. Typically such
a resource will be a surrogate, or proxy, for some other real resource
that does not have a recognizable URI. The idAttr on a resource element
permits that resource to be the target of other assertions.</P>

<P>The resourceURI identifies the target resource; the resource to which
all the assertions apply. The IDsymbol gives a name for this assertion
block so that the block may be referred to elsewhere.</P>

<P>A property takes the form:</P>

<PRE> [15] property       ::= '&lt;' propName idAttr? '&gt;' propValue '&lt;/' propName '&gt;'
                       | '&lt;' propName idRefAttr '/&gt;'
 [16] propName       ::= name | namePrefix ':' name
 [17] propValue      ::= node |&nbsp;string
 [18] name           ::= (any legal XML name symbol)
 [19] namePrefix     ::= (any legal XML&nbsp;namespace prefix)
 [20] string         ::= (any XML text)</PRE>

<P>Within <I>property</I>, the resourceURI identifies the resource that
is the value of this property. <I><TT>String</TT></I>s must be well-formed
XML; the usual XML&nbsp;content quoting and escaping mechanisms may be
used if the string contains character sequences that violate the well-formedness
rules.</P>

<P>It is recommended that property names always be qualified by the namespace
prefix to unambiguously connect the property definition with the corresponding
RDF&nbsp;schema.</P>

<H2><A NAME="signing"></A>4. Signed RDF</H2>

<P>[[<I>This section to be completed</I>]]</P>

<P>Assertions may be <I>signed</I> to facilitate decisions that require
trust. Simple signatures include checksums or other assertions about independently
verifiable characteristics of a resource. The simplest example of a signature
is a statement that the associated assertions apply only to the version
of the resource labeled with a given creation date. Stronger signatures
will include cryptographic measures to increase the likelihood of detection
of falsification of or inadvertent changes to the signed assertions or
the resource(s) to which they apply.</P>

<H2><A NAME="examples"></A>5. Examples</H2>

<H3>5.1. Examples Using the RDF Core</H3>

<P>With the core defined, we can construct and exchange directed graph
models of arbitrary complexity. We could begin by saying very simple things,
such as &quot;John Smith is the Author of the document whose URL is http://www.bar.com/some.doc&quot;.
This assertion can be modeled with the directed graph:</P>

<CENTER><P><IMG SRC="fig1a.gif"> </P></CENTER>

<P>(We use a notation where Nodes are represented as ellipses, arcs as
arrows, and strings are given in rectangles.) <BR>
This small graph can be exchanged in the serialization syntax as: </P>

<BLOCKQUOTE>
<PRE>&lt;?namespace href=&quot;http://docs.r.us.com/bibliography-info&quot; as=&quot;bib&quot;?&gt;
&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;RDF:serialization&gt;
&nbsp; &lt;RDF:assertions href=&quot;http://www.bar.com/some.doc&quot;&gt;
&nbsp;&nbsp;&nbsp; &lt;bib:author&gt;John Smith&lt;/bib:author&gt;
&nbsp; &lt;/RDF:assertions&gt;
&lt;/RDF:serialization&gt;</PRE>
</BLOCKQUOTE>

<P>We could create a more elaborate model in order to say additional things
about John Smith, such as his contact information. We might construct the
model: </P>

<CENTER><P><IMG SRC="fig1b.gif"> </P></CENTER>

<P>which could be exchanged using the XML serialization representation:
</P>

<BLOCKQUOTE>
<PRE>&lt;?namespace href=&quot;http://docs.r.us.com/bibliography-info&quot; as=&quot;bib&quot;?&gt;
&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;RDF:serialization&gt;
&nbsp; &lt;RDF:assertions href=&quot;http://www.bar.com/some.doc&quot;&gt;
&nbsp;&nbsp;&nbsp; &lt;bib:author&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RDF:resource&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;bib:name&gt;John Smith&lt;/bib:name&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;bib:email&gt;john@smith.com&lt;/bib:email&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;bib:phone&gt;+1 (555) 123-4567&lt;/bib:phone&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;/RDF:resource&gt;
&nbsp;&nbsp;&nbsp; &lt;/bib:author&gt;
&nbsp; &lt;/RDF:assertions&gt;
&lt;/RDF:serialization&gt;</PRE>
</BLOCKQUOTE>

<P>The serialization above is equivalent to this second serialization:</P>

<BLOCKQUOTE>
<PRE>&lt;?namespace href=&quot;http://docs.r.us.com/bibliography-info&quot; as=&quot;bib&quot;?&gt;
&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;RDF:serialization&gt;
&nbsp; &lt;RDF:assertions href=&quot;http://www.bar.com/some.doc&quot;&gt;
&nbsp;&nbsp;&nbsp; &lt;bib:author href=&quot;#John_Smith&quot;/&gt;
&nbsp; &lt;/RDF:assertions&gt;
&lt;/RDF:serialization&gt;

&lt;RDF:resource id=&quot;John_Smith&quot;&gt;
  &lt;bib:name&gt;John Smith&lt;/bib:name&gt;
&nbsp; &lt;bib:email&gt;john@smith.com&lt;/bib:email&gt;
&nbsp; &lt;bib:phone&gt;+1 (555) 123-4567&lt;/bib:phone&gt;
&lt;/RDF:resource&gt; </PRE>
</BLOCKQUOTE>

<P>As an example of making a statement about a statement, consider the
case of wanting to compute a digital signature on an RDF assertion. (We
will assume that the signature is computed over a concrete XML rendition
of the assertion rather than over an internal representation. The figure
below shows a box containing a small graph. This is a convention to indicate
that the XML content whose ID is foo is a concrete representation of the
graph it contains.) </P>

<CENTER><P><IMG SRC="reify.gif"> </P></CENTER>

<P>What we want to say in the model is expressed by the pair of graphs
at the top of the figure - that we have an XML encoding of some assertion,
and that there is some other XML content that is a digital signature over
that encoding. If we care to delve into the details, we could build the
model at the bottom of the image. Those models could also be expressed
as: </P>

<BLOCKQUOTE>
<PRE>&lt;?namespace href=&quot;http://purl.org/DublinCore/RDFschema&quot; as=&quot;DC&quot;?&gt;
&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;?namespace href=&quot;http://www.w3.org/schemas/DSig-schema&quot; as=&quot;DSIG&quot;?&gt;
&lt;RDF:serialization&gt;
  &lt;RDF:assertions href=&quot;http://www.bar.com/some.doc&quot; id=&quot;foo&quot;&gt;
&nbsp;   &lt;DC:Creator&gt;John Smith&lt;/DC:Creator&gt;
  &lt;/RDF:assertions&gt; </PRE>

<PRE>  &lt;RDF:assertions href=&quot;#foo&quot;&gt;
   &nbsp;&lt;DSIG:Signature&gt;AKGJOERGHJWEJ348GH4HGEIGH4ROI4&lt;/DSIG:Signature&gt;
  &lt;/RDF:assertions&gt;
&lt;/RDF:serialization&gt;</PRE>
</BLOCKQUOTE>

<P>Also note that node labels such as &quot;RDF:Property&quot; are shorthand
for a full URI such as &quot;http://www.w3.org/schemas/rdf-schema#Property&quot;.</P>

<H3>5.2. Sequence Examples</H3>

<P>As an example of sequences, we might look at some of the works written
by John Smith. Since John is rather prolific, we could use sequences to
keep lists of his works sorted by publication date, or according to the
alphabetical order of the subject of the article: </P>

<CENTER><P><IMG SRC="fig2a.gif"> </P></CENTER>

<P>This model could be exchanged as: </P>

<BLOCKQUOTE>
<PRE>&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;RDF:serialization&gt;
&nbsp; &lt;RDF:seq id=&quot;JSPapersByDate&quot;&gt;
&nbsp;&nbsp;&nbsp; &lt;RDF:li href=&quot;http://www.dogworld.com/Aug96.doc&quot;/&gt;
&nbsp;&nbsp;&nbsp; &lt;RDF:li href=&quot;http://www.carchat.com/Sept97.html&quot;/&gt;
&nbsp;&nbsp;&nbsp; &lt;RDF:li href=&quot;http://www.webnuts.net/Jan97.html&quot;/&gt;
&nbsp; &lt;/RDF:seq&gt; </PRE>

<PRE>&nbsp; &lt;RDF:seq id=&quot;JSPapersBySubj&quot;&gt;
&nbsp;&nbsp;&nbsp; &lt;RDF:li href=&quot;http://www.carchat.com/Sept97.html&quot;/&gt;
&nbsp;&nbsp;&nbsp; &lt;RDF:li href=&quot;http://www.dogworld.com/Aug96./doc&quot;/&gt;
&nbsp;&nbsp;&nbsp; &lt;RDF:li href=&quot;http://www.webnuts.net/Jan97.html&quot;/&gt;
&nbsp; &lt;/RDF:seq&gt;
&lt;/RDF:serialization&gt;</PRE>
</BLOCKQUOTE>

<H3>5.3. Using Binary Relations to Represent Relations of Higher Arity</H3>

<P>The RDF data model intrinsically only supports binary relations. However,
in this section we show how we can represent higher arity relations using
just binary relations. As an example, consider the subject of one of John
Smith's recent articles - library science. We could use the Dewey Decimal
Code for library science to categorize that article. While the numeric
code is the true Dewey value, few people can understand those codes. Therefore,
the description of the Dewey categories has been translated into several
different languages. In fact, Dewey Decimal codes are far from the only
subject categorization scheme. So, we might want to define a &quot;Subject&quot;
node that not only told us the subject of a paper, but also indicated the
language and categorization scheme it came from. That might look like:
</P>

<CENTER><P><IMG SRC="dewey.gif"> </P></CENTER>

<P>which could be exchanged as: </P>

<BLOCKQUOTE>
<PRE>&lt;?namespace href=&quot;http://purl.org/DublinCore/RDFschema&quot; as=&quot;DC&quot;?&gt;
&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;RDF:serialization&gt;
  &lt;RDF:assertions href=&quot;http://www.webnuts.net/Jan97.html&quot;&gt;
&nbsp;   &lt;DC:subject&gt;
&nbsp;&nbsp;&nbsp;   &lt;RDF:resource id=&quot;subject_001&quot;&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DC:scheme&gt;Dewey Decimal Code&lt;/DC:scheme&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;DC:lang&gt;English&lt;/DC:lang&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RDF:PropValue&gt;020 - Library Science&lt;/RDF:PropValue&gt;
  &nbsp;&nbsp;&nbsp; &lt;/RDF:resource&gt;
  &nbsp; &lt;/DC:subject&gt;
  &lt;/RDF:assertions&gt;
&lt;/RDF:serialization&gt;</PRE>
</BLOCKQUOTE>

<P>A common use of this higher-arity capability is when dealing with units
of measure. A person's weight is not just a number like 94, it also requires
us to specify the units on that number. In this case we might be using
either pounds or kilograms. We could use a relationship with an additional
arc to record the fact that John Smith is a rather strapping gentleman:</P>

<CENTER><P><IMG SRC="weight.gif"></P></CENTER>

<P>&nbsp;which can be exchanged as:</P>

<BLOCKQUOTE>
<PRE>&lt;?namespace href=&quot;http://www.nist.gov/RDFschema&quot; as=&quot;NIST&quot;?&gt;
&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;RDF:serialization&gt;
  &lt;RDF:assertions href=&quot;John_Smith&quot;&gt;
  &nbsp; &lt;NIST:weight&gt;
  &nbsp;&nbsp;&nbsp; &lt;RDF:resource id=&quot;weight_001&quot;&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;NIST:units href=&quot;#pounds&quot;/&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;RDF:PropValue&gt;200&lt;/RDF:PropValue&gt;
  &nbsp;&nbsp;&nbsp; &lt;/RDF:resource&gt;
  &nbsp; &lt;/NIST:weight&gt;
  &lt;/RDF:assertions&gt;
&lt;/RDF:serialization&gt;</PRE>
</BLOCKQUOTE>

<P>assuming the node &quot;pounds&quot; was defined elsewhere. </P>

<H2><A NAME="namespaces"></A>Appendix A: Brief Explanation of XML Namespaces</H2>

<P>This material is non-normative, but believed necessary for an understanding
of the RDF serialization syntax. It will be replaced by references to the
appropriate sections of the XML specifications once they have been issued.
The material here is our best understanding of the namespace proposal,
but almost certainly differs from what the final result will be. </P>

<P>The XML-working group is currently developing a facility that will allow,
at least, Generic Identifiers (tag names) to have a prefix which will make
them unique and will prevent name clashes when developing documents that
mix elements from different schemas. This facility allows a document's
prolog to contain a set of Processing Instructions (PIs) of the form: </P>

<UL>
<PRE>&lt;?namespace href=&quot;some-uri&quot; as=&quot;some-abbreviation&quot;?&gt;</PRE>
</UL>

<P>for example </P>

<UL>
<PRE>&lt;?namespace href=&quot;http://www.w3.org/schemas/rdf-schema&quot; as=&quot;RDF&quot;?&gt;
&lt;?namespace href=&quot;http://www.purl.org/DublinCore/schema&quot; as=&quot;DC&quot;?&gt;</PRE>
</UL>

<P>Elements in the document may then use generic identifiers of the form
&lt;RDF:assertions&gt; or &lt;DC:Title&gt;. Those element names would expand
to URIs such as http://www.w3.org/schemas/rdf-schema#assertions.</P>

<P>Note also that XML is case-sensitive.
<HR WIDTH="100%"></P>

<ADDRESS><FONT SIZE=-1>Ora Lassila &lt;<A HREF="mailto:lassila@w3.org">lassila@w3.org</A>&gt;<BR>
Ralph R. Swick &lt;<A HREF="mailto:swick@w3.org">swick@w3.org</A>&gt;</FONT></ADDRESS>

<P><FONT SIZE=-1>Revision History:<BR>
2-October-1997: First public draft<BR>
1-October-1997: Edits in preparation for first public distribution<BR>
1-August-1997:&nbsp;First draft to Working Group</FONT></P>

<P><FONT SIZE=-1>Last updated: $Date: 2017/10/02 11:00:56 $ </FONT></P>

<SCRIPT src="https://www.w3.org/scripts/TR/fixup.js"></SCRIPT></BODY>
</HTML>
